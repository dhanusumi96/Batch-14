import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re
import warnings

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

warnings.filterwarnings('ignore')

# Load and filter the dataset
df = pd.read_csv("DPG .csv")
df = df[df['CHARACTER'].isin(['Positive', 'Negative', 'Neutral'])] Â # Keep only relevant classes

print("First 5 rows of data:")
print(df.head())
print("\nDataset Info:")
print(df.info())

plt.figure(figsize=(8, 5))
sns.countplot(data=df, x='CHARACTER')
plt.title('Distribution of Sentiments')
plt.xlabel('Sentiment')
plt.ylabel('Count')
plt.show()

def clean_text(text):
Â  Â  text = text.lower()
Â  Â  text = re.sub(r'\d+', '', text)
Â  Â  text = re.sub(r'[^\w\s]', '', text)
Â  Â  return text.strip()

df['COMMENT'] = df['COMMENT'].apply(clean_text)

tfidf = TfidfVectorizer(max_features=500)
X = tfidf.fit_transform(df['COMMENT'])

le = LabelEncoder()
y = le.fit_transform(df['CHARACTER'])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)
xgb_model.fit(X_train, y_train)
y_pred_xgb = xgb_model.predict(X_test)

def evaluate_model(y_true, y_pred, model_name):
Â  Â  print(f"\n{model_name} Classification Report:")
Â  Â  print(classification_report(y_true, y_pred, target_names=le.classes_))
Â  Â  acc = accuracy_score(y_true, y_pred)
Â  Â  print(f"Accuracy: {acc:.2%}")

Â  Â  cm = confusion_matrix(y_true, y_pred)
Â  Â  sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=le.classes_, yticklabels=le.classes_)
Â  Â  plt.title(f'Confusion Matrix - {model_name}')
Â  Â  plt.xlabel('Predicted')
Â  Â  plt.ylabel('Actual')
Â  Â  plt.show()

evaluate_model(y_test, y_pred_rf, "Random Forest")
evaluate_model(y_test, y_pred_xgb, "XGBoost")

try:
Â  Â  import gradio as gr
except ImportError:
Â  Â  import subprocess
Â  Â  subprocess.check_call(['pip', 'install', 'gradio'])
Â  Â  import gradio as gr

with gr.Blocks() as interface:
Â  Â  gr.Markdown("## ðŸ’¬ Sentiment Analyzer (Single + Full Dataset View)")

Â  Â  with gr.Tab(" Single Comment"):
Â  Â  Â  Â  inp = gr.Textbox(lines=3, placeholder="Type your comment here...")
Â  Â  Â  Â  out = gr.Textbox()
Â  Â  Â  Â  btn = gr.Button("Predict Emotion")
Â  Â  Â  Â  btn.click(fn=predict_single, inputs=inp, outputs=out)

Â  Â  with gr.Tab(" Analyze All Comments in File"):
Â  Â  Â  Â  table = gr.DataFrame()
Â  Â  Â  Â  analyze_btn = gr.Button("Run Analysis on All Comments")
Â  Â  Â  Â  analyze_btn.click(fn=analyze_all_comments, outputs=table)

print("\n Launching Gradio interface...")
interface.launch(share=True)
